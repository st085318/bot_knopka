import parser
import telebot
import os
import json
from telebot import types
from addresses import adds
from keys import TELEGRAM_API_KEY

bot = telebot.TeleBot(TELEGRAM_API_KEY)
NEW_PEOPLE_URL = "https://newpeople.ru/"
change = {'—à.': "–®–û–°–°–ï", '–Ω–∞–±.': "–ù–ê–ë.", '–∞–ª–ª–µ—è': "–ê–õ–õ–ï–Ø", '—É–ª.': "–£–õ.", '–∫–≤-–ª': "–ö–í–ê–†–¢–ê–õ", '—Ç—É–ø.': "–¢–£–ü.",
          '–±-—Ä': "–ë–£–õ–¨–í.", '–ø—Ä-—Ç': "–ü–†–û–°–ü.", '–º–∫—Ä.': "", '–ª–∏–Ω–∏—è': "–õ–ò–ù–ò–Ø", '–ø—Ä-–¥': "–ü–†.", '–ø–µ—Ä.': "–ü–ï–†."}
quantity_streets_once = 8


def create_file(chat_id):
    with open(f"users_info/{chat_id}.json", "w") as f:
        f.write(json.dumps({"MESSAGE_ID": 0, "PREV_MSG_ID": 0, "UIK_NUM": 0,
                     "address": {"county": "", "district": "", "street": "", "house": "", "building": ""},
                     "set_probably_addresses": {}, "my_candidats": []}))


def get_user_info(chat_id):
    with open(f"users_info/{chat_id}.json", "r") as f:
        info = json.loads(f.read())
    return info


def set_user_info(chat_id, var, val):
    user_info = get_user_info(chat_id)
    user_info[var] = val
    with open(f"users_info/{chat_id}.json", "w") as f:
        f.write(json.dumps(user_info))


# –ê–ª–µ—à–∏–Ω—Å–∫–∞—è -> –ê–ª—à–∫–∏–Ω—Å–∫–∞—è
# TODO: —É–¥–∞–ª—è—Ç—å —ë
def address_to_url_str(CHAT_ID):
    try:
        address = get_user_info(CHAT_ID)["address"]
        add = f"–ì–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞ {address['county']} {address['district']} "
        street = address['street']
        for suffix in change.keys():
            if street.find(suffix) != -1:
                street = street[:street.find(suffix) - 2] + " " + change[suffix]
        return add + street.replace('—ë', '').upper() + " " + address["house"]
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return ""


def address_to_str(CHAT_ID):
    try:
        address = get_user_info(CHAT_ID)["address"]
        add = f""
        for k in address.keys():
            if address[k] != "":
                add += address[k] + ", "
        add = add[:-2]
        return add
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return ""


def make_markup_swipe_candidates(page):
    markup = types.InlineKeyboardMarkup()
    # markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥>>", callback_data=f"{direction}swipe{page}"))
    # markup.add(types.InlineKeyboardButton("<<–ù–∞–∑–∞–¥", callback_data=f"{direction}swipe{page}"))
    markup.row(types.InlineKeyboardButton("<<–ù–∞–∑–∞–¥", callback_data=f"-1swipeC{page}"),
               types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close"),
               types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥>>", callback_data=f"1swipeC{page}"))
    return markup


def make_markup():
    markup = types.InlineKeyboardMarkup()
    button_cik = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ –º–æ–π –£–ò–ö", callback_data="find_cik")
    # button_candidates = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="candidates")
    markup.add(button_cik)
    # markup.add(button_candidates)
    return markup


def make_county_markup():
    markup = types.InlineKeyboardMarkup()
    for c in adds.keys():
        callback = "county" + str(c)[:7]
        markup.add(types.InlineKeyboardButton(to_short_county(str(c)), callback_data=callback))
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close"))
    return markup


def make_district_markup(county):
    markup = types.InlineKeyboardMarkup()
    for district in adds[county].keys():
        markup.add(types.InlineKeyboardButton(str(district), callback_data="district" + str(district)[:10]))
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close"))
    return markup


def make_street_markup(CHAT_ID, county, district, num_street_page=0):
    try:
        markup = types.InlineKeyboardMarkup()
        shift = 0
        global quantity_streets_once
        for c in adds[county][district][num_street_page:num_street_page + quantity_streets_once]:
            # TODO:rewrite on num
            callback = "street" + str(shift) + ":" + str(num_street_page)
            markup.add(types.InlineKeyboardButton(str(c), callback_data=callback))
            shift += 1
        if num_street_page + 7 >= len(adds[county][district]) - 1:
            markup.add(types.InlineKeyboardButton("–ú–æ–µ–π —É–ª–∏—Ü—ã –Ω–µ—Ç", callback_data="dont_find_street"))
        markup.row(types.InlineKeyboardButton("<<–ù–∞–∑–∞–¥", callback_data=f"-1swipeS{num_street_page}"),
                   types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close"),
                   types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥>>", callback_data=f"1swipeS{num_street_page}"))
        return markup
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return None


def make_choose_add_markup(CHAT_ID):
    try:
        markup = types.InlineKeyboardMarkup()
        set_probably_addresses = dict(get_user_info(CHAT_ID)["set_probably_addresses"])
        for add_info in set_probably_addresses.keys():
            callback = "uik" + str(set_probably_addresses[add_info]["id"])
            markup.add(types.InlineKeyboardButton(add_info, callback_data=callback))
        markup.add(types.InlineKeyboardButton("–ú–æ–µ–≥–æ –¥–æ–º–∞ –Ω–µ—Ç", callback_data="dont_find_street"))
        return markup
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return None


def to_short_county(county: str):
    if county == "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥":
        return "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥"
    split_county = county.split(" ")
    split_county[0] = split_county[0].split("-")
    short_county = ""
    for w in split_county[0]:
        short_county += w[0].upper()
    for w in split_county[1:]:
        short_county += w[0].upper()
    return short_county


def delete_message(CHAT_ID, message_id):
    try:
        bot.delete_message(CHAT_ID, message_id)
    except Exception as e:
        print(e)


def greeting(message):
    CHAT_ID = message.from_user.id
    href = "https://www.mos.ru/city/projects/vote2022/#who"
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –≥–æ–¥—É —Å–æ—Å—Ç–æ—è—Ç—Å—è –≤—ã–±–æ—Ä—ã –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –¥–µ–ø—É—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–π–æ–Ω–∞—Ö –ú–æ—Å–∫–≤—ã.\n"
                                           "–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞, –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –Ω–∞ –≤—ã–±–æ—Ä—ã –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.\n\n"
                                           "üó≥ –ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –≤—ã–±–æ—Ä—ã –∏–ª–∏ –≥–æ–ª–æ—Å—É–π –æ–Ω–ª–∞–π–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ mos.ru.\n\n"
                                           "–ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, –≤–æ—Ç —Ç—Ä–∏ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –≤—ã–±–æ—Ä—ã:\n\n"
                                           "1. –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è –≤–ª–∞—Å—Ç—å ‚Äì —Å–∞–º–∞—è –±–ª–∏–∑–∫–∞—è –ª—é–¥—è–º. –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∞—Å –º–æ–∂–µ—Ç –ª–∏—á–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–µ–ø—É—Ç–∞—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤—ë—Ç –ø–æ —Å–æ—Å–µ–¥—Å—Ç–≤—É –∏ –Ω–µ –ø–æ–Ω–∞—Å–ª—ã—à–∫–µ –∑–Ω–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –Ω–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞\n\n"
                                           "2. –ß—Ç–æ–±—ã –°–æ–≤–µ—Ç –¥–µ–ø—É—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–ª –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∂–∏—Ç–µ–ª–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–µ–ø—É—Ç–∞—Ç—Å–∫–∏–π –∫–æ—Ä–ø—É—Å. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä–∞—Ö ‚Äì –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —à–∞–Ω—Å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ\n\n"
                                           "3. –ï—Å–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–¥—ë—Ç–µ –Ω–∞ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫, –≤—ã–±–æ—Ä –∑–∞ –≤–∞—Å —Å–¥–µ–ª–∞—é—Ç –¥—Ä—É–≥–∏–µ. –í–∞—à –≥–æ–ª–æ—Å –Ω–µ –±—É–¥–µ—Ç —É—Å–ª—ã—à–∞–Ω, –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç, –∞ –æ–± —É–¥–æ–±—Å—Ç–≤–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–µ –º–æ—Å–∫–≤–∏—á–µ–π –±—É–¥—É—Ç –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å –ª–∏—à—å –æ—Ç —Å–ª—É—á–∞—è –∫ —Å–ª—É—á–∞—é.\n\n\n"
                                           f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–±–æ—Ä–∞—Ö —á–∏—Ç–∞–π –Ω–∞ —Å–∞–π—Ç–µ: {href}\n\n"
                                           "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ –≤—ã–±–æ—Ä–∞—Ö  ¬´–ñ–º–∏ –≥–∞–ª–æ—á–∫—É¬ª  —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø–∞—Ä—Ç–∏–∏ ¬´–ù–æ–≤—ã–µ –õ—é–¥–∏¬ª.", disable_web_page_preview=True)
    msg = bot.send_message(message.from_user.id, "–ù–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:", reply_markup=make_markup())
    set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))


@bot.message_handler(commands=['start'])
def send_welcome(message):
    create_file(message.from_user.id)
    greeting(message)


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("dont_find_street") != -1)
def dont_find_something(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    dont_find(CHAT_ID)


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("swipeC") != -1)
def swipe_candidates(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        my_candidats = list(get_user_info(CHAT_ID)["my_candidats"])
        delete_message(CHAT_ID, MESSAGE_ID)
        pointer = str(callback_query.data).find("swipeC")
        direction = int(str(callback_query.data)[:pointer])
        page = int(str(callback_query.data)[pointer + 6:])
        msg = bot.send_message(callback_query.from_user.id, "–í–∞—à–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n" + my_candidats[
            (page + direction + len(my_candidats)) % (len(my_candidats))],
                               reply_markup=make_markup_swipe_candidates(
                                   (page + direction + len(my_candidats)) % (len(my_candidats))))
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return ""


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("swipeS") != -1)
def swipe_streets(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        MESSAGE_ID = get_user_info(str(CHAT_ID))["MESSAGE_ID"]
        delete_message(CHAT_ID, MESSAGE_ID)
        pointer = str(callback_query.data).find("swipeS")
        direction = int(str(callback_query.data)[:pointer])
        page_begin = int(str(callback_query.data)[pointer + 6:].split(".")[0])
        county = get_user_info(str(CHAT_ID))["address"]["county"]
        district = get_user_info(str(CHAT_ID))["address"]["district"]
        quantity = len(adds[county][district])
        new_page = 0
        global quantity_streets_once
        if direction == -1 and page_begin == 0:
            new_page = quantity - quantity % quantity_streets_once
        elif direction == -1:
            new_page = (page_begin - 8) % quantity
        if new_page == quantity:
            new_page = quantity - quantity_streets_once
        elif direction == 1:
            new_page = page_begin + 8
        if new_page >= quantity:
            new_page = 0

        msg = bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É:",
                               reply_markup=make_street_markup(CHAT_ID, county, district, new_page))
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("uik") == 0)
def send_address(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        id = callback_query.data[3:]
        address = ""
        uik = {}
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        try:
            delete_message(CHAT_ID, MESSAGE_ID)
        except Exception:
            pass
        set_probably_addresses = dict(get_user_info(CHAT_ID)["set_probably_addresses"])
        for add in set_probably_addresses.keys():
            if str(set_probably_addresses[add]['id']) == id:
                address = add
                uik = set_probably_addresses[add]["uik"]
        set_user_info(CHAT_ID, "UIK_NUM", str(int(uik['name'][uik['name'].rfind("‚Ññ") + 1:])))
        add_msg = f"üè† –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n {address}\n\nüè´ –í–∞—à–∞ {uik['name']} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n" \
                  f"{uik['address']}"
        msg = bot.send_message(callback_query.from_user.id, add_msg)
        global PREV_MSG_ID
        set_user_info(CHAT_ID, "PREV_MSG_ID", str(msg.message_id))
        print_candidates(callback_query.from_user.id, uik["vrn"], CHAT_ID)
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return ""


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("find_cik") == 0)
def inline_county(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        PREV_MSG_ID = get_user_info(CHAT_ID)["PREV_MSG_ID"]
        try:
            delete_message(CHAT_ID, MESSAGE_ID)
            delete_message(CHAT_ID, PREV_MSG_ID)
        except Exception as e:
            pass
        bot.answer_callback_query(callback_query.id)
        msg = bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥:", reply_markup=make_county_markup())
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return ""


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("close") == 0)
def close(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        PREV_MSG_ID = get_user_info(CHAT_ID)["PREV_MSG_ID"]
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        delete_message(CHAT_ID, MESSAGE_ID)
        if not (PREV_MSG_ID is None):
            delete_message(CHAT_ID, PREV_MSG_ID)
        menu(CHAT_ID)
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("county") == 0)
def inline_district(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        bot.answer_callback_query(callback_query.id)
        county = callback_query.data[6:]
        for c in adds.keys():
            if c.find(county) == 0:
                county = c
                break
        address = get_user_info(CHAT_ID)["address"]
        address["county"] = county
        set_user_info(CHAT_ID, "address", address)
        msg = bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
                               reply_markup=make_district_markup(county))
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        delete_message(CHAT_ID, MESSAGE_ID)
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("district") == 0)
def inline_street(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    try:
        address = get_user_info(CHAT_ID)["address"]
        district = callback_query.data[8:]
        for d in adds[address["county"]].keys():
            if d.find(district) == 0:
                district = d
                break
        address["district"] = district
        set_user_info(CHAT_ID, "address", address)
        msg = bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É:",
                               reply_markup=make_street_markup(CHAT_ID, address["county"], address["district"]))
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        delete_message(CHAT_ID, MESSAGE_ID)
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@bot.callback_query_handler(lambda callback_query: callback_query.data.find("street") == 0)
def inline_house(callback_query: types.CallbackQuery):
    CHAT_ID = callback_query.from_user.id
    address = get_user_info(CHAT_ID)["address"]
    try:
        shift = int(callback_query.data[6:int(str(callback_query.data).find(":"))])
        page_num = int(callback_query.data[int(str(callback_query.data).find(":")) + 1:])
        street = adds[address["county"]][address["district"]][shift + page_num]
        address["street"] = street
        set_user_info(CHAT_ID, "address", address)
        msg = bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞")
        MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
        delete_message(CHAT_ID, MESSAGE_ID)
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
        bot.register_next_step_handler(msg, get_street)
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


def get_street(message):
    try:
        CHAT_ID = message.from_user.id
        user_info = get_user_info(CHAT_ID)
        MESSAGE_ID = user_info["MESSAGE_ID"]
        delete_message(CHAT_ID, MESSAGE_ID)
        delete_message(CHAT_ID, message.id)
        load_msg = bot.send_message(message.from_user.id, "–ó–∞–≥—Ä—É–∑–∫–∞... üîÅ")
        address = user_info["address"]
        address["house"] = message.text
        set_user_info(CHAT_ID, "address", address)
        diff_vrn, info = parser.get_address_info(address_to_url_str(CHAT_ID))
        MESSAGE_ID = load_msg.message_id
        if len(diff_vrn) == 1:
            uik = {}
            for i in info.keys():
                uik = info[i]["uik"]
            set_user_info(CHAT_ID, "UIK_NUM", str(int(uik['name'][uik['name'].rfind("‚Ññ") + 1:])))
            add_msg = f"üè† –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n{address_to_str(CHAT_ID)}\n\nüè´ –í–∞—à–∞ {uik['name']} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n" \
                      f"{uik['address']}\n\n"
            delete_message(CHAT_ID, MESSAGE_ID)
            msg = bot.send_message(message.from_user.id, add_msg)
            set_user_info(CHAT_ID, "PREV_MSG_ID", str(msg.message_id))
            print_candidates(message.from_user.id, uik["vrn"], CHAT_ID)
        elif len(diff_vrn) == 0:
            set_user_info(CHAT_ID, "MESSAGE_ID", MESSAGE_ID)
            dont_find(CHAT_ID, 1)
        else:
            set_user_info(CHAT_ID, "set_probably_addresses", info)
            delete_message(CHAT_ID, MESSAGE_ID)
            msg = bot.send_message(message.from_user.id, "–£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=make_choose_add_markup(CHAT_ID))
            set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


def get_candidates_info(c, cand_msg, q, CHAT_ID):
    try:
        time_point = str(c["datroj"]).rfind(" ")
        namio_point = c["namio"].find("–ø–∞—Ä—Ç–∏–∏")
        if namio_point == -1:
            namio_point = -7
        namio = c["namio"][namio_point + 7:]
        fio = str(c["fio"])
        if namio == "\"–ù–û–í–´–ï –õ–Æ–î–ò\"":
            fio = fio
        if namio == "–°–∞–º–æ–≤—ã–¥–≤–∏–∂–µ–Ω–∏–µ":
            namio = "‚¨ú" + namio
        elif namio == "\"–ù–û–í–´–ï –õ–Æ–î–ò\"":
            namio = "üó≥" + namio
        elif namio == "\"–ö–û–ú–ú–£–ù–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ü–ê–†–¢–ò–Ø –†–û–°–°–ò–ô–°–ö–û–ô –§–ï–î–ï–†–ê–¶–ò–ò\"":
            namio = "üü•" + namio
        elif namio == "\"–ï–î–ò–ù–ê–Ø –†–û–°–°–ò–Ø\"":
            namio = "üü¶" + namio
        elif namio == "–°–ü–†–ê–í–ï–î–õ–ò–í–ê–Ø –†–û–°–°–ò–Ø - –ü–ê–¢–†–ò–û–¢–´ - –ó–ê –ü–†–ê–í–î–£ –≤ –≥–æ—Ä–æ–¥–µ –ú–æ—Å–∫–≤–µ":
            namio_point = namio.find("–†–û–°–°–ò–Ø")
            namio = "üüß" + namio[:namio_point + 6]
        elif namio == "–õ–î–ü–† - –õ–∏–±–µ—Ä–∞–ª—å–Ω–æ-–¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞—Ä—Ç–∏–∏ –†–æ—Å—Å–∏–∏":
            namio = "üü®" + namio
        elif namio.upper().find("–Ø–ë–õ–û–ö–û") != -1:
            namio = "üü©" + namio

        cand_msg += "üë§" + fio + " (" + str(c["datroj"])[:time_point] + ")\n" + str(namio + "\n\n")
        q += 1
        if q % 7 == 0:
            my_candidats = list(get_user_info(CHAT_ID)["my_candidats"])
            my_candidats.append(cand_msg)
            set_user_info(CHAT_ID, "my_candidats", my_candidats)
            cand_msg = ""
        return q, cand_msg
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        return 0, ""


def print_candidates(message_id, vrn, CHAT_ID):
    try:
        user_info = get_user_info(CHAT_ID)
        load_msg = bot.send_message(message_id, "–ó–∞–≥—Ä—É–∑–∫–∞... üîÅ")
        list_candidates, mandates = parser.get_list_of_candidates(vrn)
        UIK_NUM = user_info["UIK_NUM"]
        numokr = None
        for m in mandates.keys():
            if str(UIK_NUM) in mandates[m]:
                numokr = m
                break
        cand_msg = ""
        q = 0
        for c in list_candidates:
            if str(c['namio']).find("–ù–û–í–´–ï –õ–Æ–î–ò") != -1 and str(c['numokr']) == str(numokr):
                q, cand_msg = get_candidates_info(c, cand_msg, q, CHAT_ID)
        for c in list_candidates:
            if str(c['namio']).find("–ù–û–í–´–ï –õ–Æ–î–ò") == -1 and str(c['numokr']) == str(numokr):
                q, cand_msg = get_candidates_info(c, cand_msg, q, CHAT_ID)
        my_candidats = get_user_info(CHAT_ID)["my_candidats"]
        delete_message(CHAT_ID, load_msg.message_id)
        msg = bot.send_message(message_id, f"–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ {numokr} –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–æ–º—É –æ–∫—Ä—É–≥—É:\n" + my_candidats[0],
                               reply_markup=make_markup_swipe_candidates(0))
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except IndexError:
        bot.send_message(CHAT_ID, "üë®‚Äçüíª –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –≥–æ–¥—É. –ù–∞–ø–æ–º–Ω—é, –≤—ã–±–æ—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–µ–∑–¥–µ, –∫—Ä–æ–º–µ –©—É–∫–∏–Ω–æ, –ù–æ–≤–æ–π –ú–æ—Å–∫–≤—ã –∏ –¢—Ä–æ–∏—Ü–∫–∞.")
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


def menu(CHAT_ID):
    try:
        msg = bot.send_message(CHAT_ID, "–ù–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:", reply_markup=make_markup())
        set_user_info(CHAT_ID, "MESSAGE_ID", str(msg.message_id))
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@bot.message_handler(commands=['menu'])
def send_welcome(message):
    try:
        CHAT_ID = message.from_user.id
        greeting(message)
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


@bot.message_handler(commands=['help'])
def send_welcome(message):
    try:
        CHAT_ID = message.from_user.id
        bot.send_message(CHAT_ID, "üí¨ –ë–ª–æ–∫ ¬´–ü–æ–º–æ—â—å¬ª\n"
                                  "–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç? ‚Äì –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.\n"
                                  "–ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –≤–∞—à –£–ò–ö?* ‚Äì –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: @vfv_support_bot")
    except Exception as e:
        if CHAT_ID != 0:
            bot.send_message(CHAT_ID, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")


def dont_find(CHAT_ID, is_add=0):
    MESSAGE_ID = get_user_info(CHAT_ID)["MESSAGE_ID"]
    msg_text = ""
    if is_add:
        msg_text = f"üè† –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n{address_to_str(CHAT_ID)}?\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –£–ò–ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.\n\n"
    msg_text += f"üôã–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –¥–æ–º–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @vfv_support_bot\n\n"
    msg_text += f"üè´ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ò–∑–±–∏—Ä–∫–æ–º–∞: \n" \
          "http://www.cikrf.ru/digital-services/naydi-svoy-izbiratelnyy-uchastok"
    delete_message(CHAT_ID, MESSAGE_ID)
    msg = bot.send_message(CHAT_ID, msg_text)
    set_user_info(CHAT_ID, "PREV_MSG_ID", msg.message_id)
    menu(CHAT_ID)


if __name__ == "__main__":
    path = "users_info"
    if os.path.exists(path):
        pass
    else:
        os.mkdir(path)
    bot.infinity_polling()
